setwd("C:/Users/angel/OneDrive/Documents/Masters Work/Second Year/STA 550")
Fish2 <- read.csv("C:/Users/angel/OneDrive/Documents/Masters Work/Second Year/STA 550/Fish2.txt", sep="")
View(Fish2)
diuron.rpart(log(Fish2$MERCURY))~Fish$WEIGHT+Fish$LENGTH+Fish$STATION+Fish$RIVER
diuron.rpart(log(Fish2$MERCURY)~Fish$WEIGHT+Fish$LENGTH+Fish$STATION+Fish$RIVER)
install.packages("tree")
diuron.rpart(log(Fish2$MERCURY)~Fish$WEIGHT+Fish$LENGTH+Fish$STATION+Fish$RIVER)
library(tree)
diuron.rpart(log(Fish2$MERCURY)~Fish$WEIGHT+Fish$LENGTH+Fish$STATION+Fish$RIVER)
install.packages("rpart")
library(rpart)
diuron.rpart(log(Fish2$MERCURY)~Fish$WEIGHT+Fish$LENGTH+Fish$STATION+Fish$RIVER)
rpart(log(Fish2$MERCURY)~Fish$WEIGHT+Fish$LENGTH+Fish$STATION+Fish$RIVER)
rpart(log(Fish2$MERCURY)~Fish2$WEIGHT+Fish2$LENGTH+Fish2$STATION+Fish2$RIVER)
mercury <- rpart(log(Fish2$MERCURY)~Fish2$WEIGHT+Fish2$LENGTH+Fish2$STATION+Fish2$RIVER)
View(mercury)
summary(mercury)
plot(mercury)
plot(mercury)
X11()
plot(mercury)
plot(mercury)
mercury <- rpart(log(Fish2$MERCURY)~Fish2$WEIGHT+Fish2$LENGTH)
summary(mercury)
plot(mercury)
rpart.plot(mercury)
rpart.plot(mercury, use.n = TRUE)
plot(mercury, use.n = TRUE)
mercury <- rpart(log(Fish2$MERCURY)~Fish2$WEIGHT+Fish2$LENGTH, control = rpart.control(minsplit = 5, cp = 0.01))
mercury <- rpart(log(Fish2$MERCURY)~Fish2$WEIGHT+Fish2$LENGTH, control = rpart.control(minsplit = 5, cp = 0.01))
plot(mercury, use.n = TRUE)
text(mercury, use.n = TRUE)
plot(mercury, use.n = TRUE)
text(mercury, use.n = TRUE)
mercury <- rpart(log(MERCURY)~WEIGHT+LENGTH, control = rpart.control(minsplit = 5, cp = 0.02), data = Fish2)
text(mercury, use.n = TRUE)
plot(mercury)
text(mercury, use.n = TRUE)
mod1 = lm(log(MERCURY)~WEIGHT+LENGTH*length.categorical, data=Fish2)
mod1 = lm(log(MERCURY)~WEIGHT+LENGTH*length.categorical, data=Fish2)
length.categorical = Fish2$LENGTH > 35.75
mod1 = lm(log(MERCURY)~WEIGHT+LENGTH*length.categorical, data=Fish2)
mod2 = lm(log(MERCURY)~WEIGHT+LENGTH:length.categorical, data=Fish2)
mod1 = lm(log(MERCURY)~WEIGHT+LENGTH, data=Fish2)
mod1 = lm(log(MERCURY)~WEIGHT+LENGTH*length.categorical, data=Fish2)
mod2 = lm(log(MERCURY)~WEIGHT+LENGTH:length.categorical, data=Fish2)
mod0 = lm(log(MERCURY)~WEIGHT+LENGTH, data=Fish2)
AIC(mod0)
AIC(mod2)
plot(mercury)
text(mercury, use.n = TRUE)
X11()
plot(mercury)
text(mercury, use.n = TRUE)
Goblinfish <- read.csv("C:/Users/angel/OneDrive/Documents/Masters Work/Second Year/STA 550/Goblinfish1.csv")
View(Goblinfish)
Goblinfish$presence = Goblinfish$Abund > 0
goblin <- rpart(presence ~ Depth + Temp, method = "class", data=Goblinfish,
params = list(prior=rep(1/2,2), split ="information"))
goblin <- rpart(presence ~ Depth + Temp, method = "class", data=Goblinfish,
parms = list(prior=rep(1/2,2), split ="information"))
plot(goblin)
text(goblin, use.n = TRUE)
plot(goblin)
text(goblin, use.n = TRUE)
goblin <- rpart(presence ~ Depth + Temp, method = "class", data=Goblinfish,
parms = list(prior=rep(1/2,2), split ="information"))
summary(goblin)
plot(goblin)
text(goblin, use.n = TRUE)
goblin1 <- rpart(presence ~ Depth + Temp+Latitude+Longitude, method = "class", data=Goblinfish,
parms = list(prior=rep(1/2,2), split ="information"))
plot(goblin1)
text(goblin1, use.n = TRUE)
library(survminer)
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
library(survminer)
install.packages("car")
install.packages(pbkrtest)
install.packages("pbkrtest")
install.packages("Rtools")
library(survminer)
install.packages("pbkrtest")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"
install.packages("ggpubr")
install.packages("ggpubr")
setwd(~)
setwd("~/")
Sys.which("make")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
#Fst with StAMPP
RISG_genlite <- stamppConvert(RISG, "genlight")
library(adegenet)
library(hierfstat)
library(pegas)
library(tidyverse)
library(dunn.test)
library(StAMPP)
#Fst with StAMPP
RISG_genlite <- stamppConvert(RISG, "genlight")
#Genetix file created with PGDSpider
RISG <- read.genetix('RISG.gtx')
setwd("C:/Users/angel/OneDrive/Documents/Masters Work/Lab Work/ALC_Masters_Thesis/GeneticDiversity")
#Genetix file created with PGDSpider
RISG <- read.genetix('RISG.gtx')
#Fst with StAMPP
RISG_genlite <- stamppConvert(RISG, "genlight")
RISG_fst_stamp <- stamppFst(RISG, 1000, 95, 4)
RISG_fst_stamp <- stamppFst(RISG, 1000, 95)
RISG_fst_stamp <- stamppFst(RISG_genlite, 1000, 95, 4)
View(RISG_fst_stamp)
View(RISG_fst_stamp$Pvalues)
View(RISG_fst_stamp$Fsts)
RIGS_fst_pval <- as.data.frame(RISG_fst_stamp$Pvalues)
write.csv(RISG_fst_pval)
write.csv(RISG_fst_pval, "Fst_Pvalues")
RIGS_fst_pval <- as.data.frame(RISG_fst_stamp$Pvalues)
write.csv(RISG_fst_pval), "Fst_Pvalues.csv")
write.csv(RISG_fst_pval, "Fst_Pvalues.csv")
RIGS_fst_pval <- as.data.frame(RISG_fst_stamp$Pvalues)
View(RIGS_fst_pval)
write.csv(RIGS_fst_pval, "Fst_Pvalues.csv")
library(pheatmap)
install.packages("pheatmap")
library(pheatmap)
pheatmap(RISG_fst_stamp$Fsts, display_numbers = T, cellwidth=40, cellheight=40, main="Pairwise FST")
pheatmap(RISG_fst_pval, display_numbers = T, cellwidth=40, cellheight=40, main="Pairwise FST")
RISG_fst <- as.matrix(RISG_fst_stamp$Fsts)
pheatmap(RISG_fst, display_numbers = T, cellwidth=40, cellheight=40, main="Pairwise FST")
RISG_fst <- read.csv("FST.csv")
pheatmap(RISG_fst, display_numbers = T, cellwidth=40, cellheight=40, main="Pairwise FST")
RISG_fst <- read.csv("FST.csv")
View(RISG_fst)
pheatmap(RISG_fst, display_numbers = T, cellwidth=40, cellheight=40, main="Pairwise FST")
pheatmap(RISG_fst)
View(RISG_fst)
#Getting pairwise Fst values with Heirfstat
RISG_fst <- pairwise.WCfst(RISG)
#Getting pairwise Fst values with Heirfstat
RISG_fst <- genet.dist(RISG, method = "WC84")
View(RISG_fst)
View(RISG_fst_stamp)
Fst_stampp <- as.data.frame(RISG_fst_stamp$Fsts)
library(reshape2)
Fst_stampp <- as.data.frame(RISG_fst_stamp$Fsts)
melted_corr_mat <- melt(Fst_stampp)
View(Fst_stampp)
head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2,
fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value),
color = "black", size = 4)
Fst <- cor(RISG_stampp)
Fst_stampp <- as.data.frame(RISG_fst_stamp$Fsts)
Fst <- cor(RISG_stampp)
Fst <- cor(Fst_stampp)
melted_corr_mat <- melt(Fst)
head(melted_corr_mat)
# plotting the correlation heatmap
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2,
fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value),
color = "black", size = 4)
Fst_stampp <- as.matrix(RISG_fst_stamp$Fsts)
Fst <- cor(Fst_stampp)
melted_corr_mat <- melt(Fst)
head(melted_corr_mat)
Fst <- cor(Fst_stampp)
# plotting the correlation heatmap
ggplot(data = Fst, aes(x=Var1, y=Var2,
fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value),
color = "black", size = 4)
# plotting the correlation heatmap
ggplot(data = Fst, aes(x=Var1, y=Var2,
fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value),
color = "black", size = 4)
RISG_fst_stamp <- stamppFst(RISG_genlite, 20000, 95, 4)
print("Hello World")
RISG_fst_stamp <- stamppFst(RISG_genlite, 20000, 95, 4)
n_permutations <- 1000
permuted_fst <- numeric(n_permutations)
groups <- c("NEH","FI","CT","NR","MV","GH")
# Permutation test
n_permutations <- 10000
permuted_fst <- numeric(n_permutations)
observed_fst <- basic.stats(RISG)$Fst
groups <- c("NEH","FI","CT","NR","MV","GH")
# Permutation test
n_permutations <- 10000
permuted_fst <- numeric(n_permutations)
for (i in 1:n_permutations) {
shuffled_groups <- sample(groups)
permuted_data <- data
permuted_data$group <- shuffled_groups
permuted_fst[i] <- basic.stats(permuted_data)$Fst
}
library(adegenet)
library(hierfstat)
library(pegas)
library(tidyverse)
library(dunn.test)
library(StAMPP)
library(reshape2)
#Genetix file created with PGDSpider
RISG <- read.genetix('RISG.gtx')
#Getting pairwise Fst values with Heirfstat
# Assume 'data' is your dataset and 'groups' are your group labels
observed_fst <- basic.stats(RISG)$Fst
#Getting pairwise Fst values with Heirfstat
# Assume 'data' is your dataset and 'groups' are your group labels
RISG_stats <- basic.stats(RISG)
View(RISG_stats$pop.freq)
groups <- c("NEH","FI","CT","NR","MV","GH")
# Permutation test
n_permutations <- 10000
library(adegenet)
library(hierfstat)
library(pegas)
library(tidyverse)
library(dunn.test)
library(StAMPP)
library(reshape2)
Fst_Hier <- as.data.frame(pairwise.WCfst(RISG))
Boot_Hier <- boot.ppfst(RISG, nboot=20000)
write.csv(Fst_Hier, "Fst_Hier.csv")
write.csv(as.data.frame(Boot_Hier$ll), "Boot_ll.csv")
write.csv(as.data.frame(Boot_Hier$ul), "Boot_ul.csv")
###### Fst with StAMPP
RISG_genlite <- stamppConvert(RISG, "genlight")
RISG_fst_stamp <- stamppFst(RISG_genlite, 20000, 95, 4)
Fst_stampp <- as.matrix(RISG_fst_stamp$Fsts)
write.csv(Fst_stamp, "Fst_StAMPP.csv")
RISG_Fst_stampp <- as.matrix(RISG_fst_stamp$Fsts)
write.csv(Fst_stamp, "Fst_StAMPP.csv")
RIGS_fst_pval <- as.data.frame(RISG_fst_stamp$Pvalues)
write.csv(RIGS_fst_pval, "Pvals_STAMPP.csv")
Fst_matrix <- as.matrix(Fst_Hier)
# plotting the correlation heatmap
pheatmap(Fst_matrix, display_numbers = T, cellwidth=40, cellheight=40, main="Pairwise FST")
library(pheatmap)
# plotting the correlation heatmap
pheatmap(Fst_matrix, display_numbers = T, cellwidth=40, cellheight=40, main="Pairwise FST")
View(Fst_matrix)
Fst_matrix <- as.matrix(Fst_Hier) %>%
colnames()[1,2] <- c("CL1","CL2")
library(tidyverse)
Fst_matrix <- as.matrix(Fst_Hier) %>%
colnames()[1,2] <- c("CL1","CL2")
colnames(Fst_matrix)[1,2] <- c("CL1","CL2")
colnames(Fst_matrix)[1][2] <- c("CL1","CL2")
colnames(Fst_matrix) <- c("CT", "CL1","GH","MV", "CL2", "NR")
rownames(Fst_matrix) <- c("CT", "CL1","GH","MV", "CL2", "NR")
# plotting the correlation heatmap
pheatmap(Fst_matrix, display_numbers = T, cellwidth=40, cellheight=40, main="Pairwise FST")
View(RIGS_fst_pval)
#Statistical test for Heterozygosity
shapiro.test(RISG_Fis$Heterozygosity)
View(RISG)
library(readr)
RISG_fis <- read_table("RISG.fis")
View(RISG_fis)
#Changing values in Fis
RISG_Fis <- RISG_Fis %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild")) %>%
mutate(Heterozygosity = (RISG_Fis$`N(NM)`-RISG_Fis$`O(HOM)`)/RISG$`N(NM)`*100)
library(tidyverse)
#Changing values in Fis
RISG_Fis <- RISG_Fis %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild")) %>%
mutate(Heterozygosity = (RISG_Fis$`N(NM)`-RISG_Fis$`O(HOM)`)/RISG$`N(NM)`*100)
#Changing values in Fis
RISG_Fis <- RISG_fis %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild")) %>%
mutate(Heterozygosity = (RISG_fis$`N(NM)`-RISG_fis$`O(HOM)`)/RISG_fis$`N(NM)`*100)
View(RISG_Fis)
means_dplyr <- RISG_Fis %>%
group_by(FID) %>%
summarise(mean_numeric_column = mean(Heterozygosity))
View(means_dplyr)
#Statistical test for Heterozygosity
shapiro.test(RISG_Fis$Heterozygosity)
kruskal.test(RISG_Fis$Heterozygosity ~ RISG_Fis$FID)
dunn.test(RISG_Fis$Heterozygosity, g = RISG_Fis$FID, method  = "bonferroni")
library(dunn.test)
dunn.test(RISG_Fis$Heterozygosity, g = RISG_Fis$FID, method  = "bonferroni")
Fst_Oneside <- read.csv("C:/Users/angel/OneDrive/Documents/Masters Work/Lab Work/NACE 2024/Fst_Oneside.csv", header=FALSE, row.names=1)
View(Fst_Oneside)
Fst_Oneside <- read.csv("C:/Users/angel/OneDrive/Documents/Masters Work/Lab Work/NACE 2024/Fst_Oneside.csv")
View(Fst_Oneside)
Fst_matrix <- as.matrix(Fst_Oneside)
# plotting the correlation heatmap
pheatmap(Fst_matrix, display_numbers = T, cellwidth=40, cellheight=40, main="Pairwise FST")
library(reshape2)
# plotting the correlation heatmap
pheatmap(Fst_matrix, display_numbers = T, cellwidth=40, cellheight=40, main="Pairwise FST")
library(pheatmap)
# plotting the correlation heatmap
pheatmap(Fst_matrix, display_numbers = T, cellwidth=40, cellheight=40, main="Pairwise FST")
View(Fst_matrix)
#Getting pairwise Fst values with Heirfstat
# Assume 'data' is your dataset and 'groups' are your group labels
observed_fst <- basic.stats(RISG)$Fst
library(adegenet)
library(hierfstat)
#Getting pairwise Fst values with Heirfstat
# Assume 'data' is your dataset and 'groups' are your group labels
observed_fst <- basic.stats(RISG)$Fst
#Getting pairwise Fst values with Heirfstat
# Assume 'data' is your dataset and 'groups' are your group labels
basic_stats <- basic.stats(RISG)
View(basic_stats)
View(basic_stats$perloc)
#### Heirfstat Gabe's Version
n_permutations <- 10000
permuted_fst <- numeric(n_permutations)
groups <- c("NEH","FI","CT","NR","MV","GH")
#Getting pairwise Fst values with Heirfstat
# Assume 'data' is your dataset and 'groups' are your group labels
basic_stats <- basic.stats(RISG)$perloc$Fst
#Getting pairwise Fst values with Heirfstat
# Assume 'data' is your dataset and 'groups' are your group labels
observed_fst <- basic.stats(RISG)$perloc$Fst
View(basic_stats$perloc$Fst)
View(observed_fst)
permuted_fst <- numeric(n_permutations)
for (i in 1:n_permutations) {
shuffled_groups <- sample(groups)
permuted_data <- RISG
permuted_data$group <- shuffled_groups
permuted_fst[i] <- basic.stats(permuted_data)$perloc$Fst
}
View(RIGS_fst_pval)
View(RISG)
View(RISG$pop)
for (i in 1:n_permutations) {
shuffled_groups <- sample(groups)
permuted_data <- RISG
permuted_data$pop <- shuffled_groups
permuted_fst[i] <- basic.stats(permuted_data)$perloc$Fst
}
sample(groups)
type(RISG$pop)
class(RISG$pop)
class(sample(groups))
class(as.factor(sample(groups))
shuffled_groups <- sample(groups)
class(as.factor(sample(groups)))
for (i in 1:n_permutations) {
shuffled_groups <- as.factor(sample(groups))
permuted_data <- RISG
permuted_data$pop <- shuffled_groups
permuted_fst[i] <- basic.stats(permuted_data)$perloc$Fst
}
sample(groups)
View(basic_stats)
View(basic_stats$pop.freq)
Fst_SE <- Boot_Hier$ul-Boot_Hier$ll
View(Fst_SE)
View(Fst_matrix)
View(Fst_Hier)
Fst_Hier <- as.matrix(Fst_Hier)
Fst_z <- ((Fst_Hier-Fst_SE)/2)
View(Fst_z)
Fst_z <- ((Fst_Hier-(Fst_ul+Fst_ll)/2)/((Fst_ul-Fst_ll)/(2*1.96))
done
Fst_z <- ((Fst_Hier-(Fst_ul+Fst_ll)/2)/((Fst_ul-Fst_ll)/(2*1.96)))
Fst_z <- ((Fst_Hier-(Boot_Hier$ul+Boot_Hier$ll)/2)/((Boot_Hier$ul-Boot_Hier$ll)/(2*1.96)))
View(Fst_Hier)
View(Boot_Hier$ul)
View(Boot_Hier$ll)
2*(1-pnorm(1.52))
Fst_p-val <- 2*(1-pnorm(abs(Fst_z)))
Fst_pval <- 2*(1-pnorm(abs(Fst_z)))
View(Fst_pval)
#P-Values for Fst
Fst_mean <- (Boot_Hier$ul + Boot_Hier$ll)/2
Fst_SE <- (Boot_Hier$ul - Boot_Hier$ll)/(2*1.96)
Fst_Est <- Fst_Hier-Fst_mean
View(Fst_Est)
Fst_z <- Fst_Est/Fst_SE
Fst_pval <- 2*(1-pnorm(abs(Fst_z)))
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-1, 1)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]*" per Lineage"))
library(tidyverse)
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-1, 1)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]*" per Lineage"))
ggplot(RISG_Fis, aes(x=FID, y = Heterozygosity, fill = Type))+
geom_boxplot()+
ylim(0, 100)+
labs(x = "Lineage", y="Percent of Heterozygous Loci (%)")+
ggtitle("Heterozygosity per Lineage")
View(RISG_Fis)
View(Boot_Hier)
Boot_Hier$vc.per.loc
class(Boot_Hier$vc.per.loc)
means_dplyr <- RISG_Fis %>%
group_by(FID) %>%
summarise(mean_numeric_column = mean(Heterozygosity))
library(tidyverse)
means_dplyr <- RISG_Fis %>%
group_by(FID) %>%
summarise(mean_numeric_column = mean(Heterozygosity))
View(means_dplyr)
means_dplyr <- RISG_Fis %>%
group_by(FID) %>%
summarise(Heterozygosity = median(Heterozygosity)) %>%
summarise(Fis = median(Fis))
means_dplyr <- RISG_Fis %>%
group_by(FID) %>%
summarise(Heterozygosity = median(Heterozygosity), Fis = median(Fis))
means_dplyr <- RISG_Fis %>%
group_by(FID) %>%
summarise(Heterozygosity = median(Heterozygosity), Fis = median(F))
View(RISG_stats)
View(RISG_stats)
summary(RISG_Fis)
