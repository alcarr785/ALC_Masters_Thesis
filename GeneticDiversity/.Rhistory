install.packages("vcfR")
setwd("C:/Users/angel/OneDrive/Documents/Masters Work/Lab Work/ALC_Masters_Thesis/GeneticDiversity")
library(vcfR)
RISG <- read.vcfR(../Filtering/RISG.vcf)
library(vcfR)
RISG <- read.vcfR("../Filtering/RISG.vcf")
Samples <- read.table("Samples.txt", header = TRUE)
View(Samples)
Samples <- read.table("Samples.txt", header = TRUE) %>%
mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
View(Samples)
Samples <- read.table("Samples.txt", header = TRUE) %>%
mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
View(Samples)
het_results <- genetic_diff(RISG, pop=as.factor(poplist.names), method= 'nei')
View(het_results)
het_results <- genetic_diff(RISG, pop=as.factor(poplist.names), method= 'nei')
round(colMeans(het_results[,c(3:6)], na.rm = TRUE), digits = 3)
round(colMeans(het_results[,c(3:6)], na.rm = TRUE), digits = 3)
library(reshape2)
het_df <- melt(het_results[,c(3:6)], varnames=c('Index', 'Sample'), value.name = 'Heterozygosity', na.rm=TRUE)
library(reshape2)
het_df <- melt(het_results[,c(3:8)], varnames=c('Index', 'Sample'), value.name = 'Heterozygosity', na.rm=TRUE)
View(het_df)
library(reshape2)
het_df <- melt(het_results[,c(3:8)], varnames=c('Index', 'Sample'), value.name = 'Heterozygosity', na.rm=TRUE) %>%
mutate(Type = ifelse(Population == "CL1" | Population == "CL2", "Commercial", "Wild"))
View(het_df)
library(reshape2)
het_df <- melt(het_results[,c(3:8)], varnames=c('Index', 'Sample'), value.name = 'Heterozygosity', na.rm=TRUE) %>%
mutate(Population = recode(variable, Hs_CL1 = 'CL1', Hs_CL2 = 'CL2')) %>%
mutate(Type = ifelse(variable == "CL1" | variable == "CL2", "Commercial", "Wild"))
View(het_df)
library(reshape2)
het_df <- melt(het_results[,c(3:8)], varnames=c('Index', 'Sample'), value.name = 'Heterozygosity', na.rm=TRUE) %>%
mutate(variable = recode(variable, Hs_CL1 = 'CL1', Hs_CL2 = 'CL2')) %>%
mutate(Type = ifelse(variable == "CL1" | variable == "CL2", "Commercial", "Wild"))
library(reshape2)
het_df <- melt(het_results[,c(3:8)], varnames=c('Index', 'Sample'), value.name = 'Heterozygosity', na.rm=TRUE) %>%
mutate(variable = recode(variable, Hs_CL1 = 'CL1', Hs_CL2 = 'CL2', Hs_MV = "MV", Hs_NR = "NR", Hs_GH = "GH", Hs_CT = "CT")) %>%
mutate(Type = ifelse(variable == "CL1" | variable == "CL2", "Commercial", "Wild"))
library(ggplot2)
Het <- ggplot(het_df, aes(x=variable, y=Heterozygosity)) + geom_boxplot(fill=Type)
View(het_df)
library(ggplot2)
Het <- ggplot(het_df, aes(x=variable, y=Heterozygosity, fill = Type)) + geom_boxplot()
Het <- Het + xlab("Population")
Het <- Het + ylab("Observed Heterozygosity")
Het <- Het + theme_bw() + ggtitle("Observed Heterozygosity")
plot(Het)
library(ggplot2)
Het <- ggplot(het_df, aes(x=variable, y=Heterozygosity, fill = Type)) + geom_boxplot()
Het <- Het + xlab("Population")
Het <- Het + ylab("Observed Heterozygosity")
Het <- Het + theme_bw() + ggtitle("Observed Heterozygosity") + ylim(0,1)
plot(Het)
View(Samples)
library(adgenet)
library(adegenet)
library(heirfstat)
library(adegenet)
library(hierfstat)
RISG_genind <- vcfR2genind(RISG)
strata(RISG_genind) <- Samples
setPop(RISG_genind) <- ~Population
basicstat <- basic.stats(RISG_genind, diploid = TRUE, digits = 3)
View(basicstat)
fis_df <- melt(basicstat$Fis, varnames=c('Index', 'Sample'), value.name = 'FIS', na.rm=TRUE)
View(fis_df)
fis_df <- melt(basicstat$Fis, varnames=c('Index', 'Sample'), value.name = 'FIS', na.rm=TRUE) %>%
mutate(variable = recode(variable, Hs_CL1 = 'CL1', Hs_CL2 = 'CL2', Hs_MV = "MV", Hs_NR = "NR", Hs_GH = "GH", Hs_CT = "CT")) %>%
mutate(Type = ifelse(variable == "CL1" | variable == "CL2", "Commercial", "Wild"))
View(fis_df)
fis_df <- melt(basicstat$Fis, varnames=c('Index', 'Sample'), value.name = 'FIS', na.rm=TRUE) %>%
mutate(Type = ifelse(Sample == "CL1" | Sample == "CL2", "Commercial", "Wild"))
fis_df <- melt(basicstat$Fis, varnames=c('Index', 'Sample'), value.name = 'FIS', na.rm=TRUE) %>%
mutate(variable = recode(variable, FI = 'CL1', NEH = 'CL2')) %>%
mutate(Type = ifelse(variable == "CL1" | variable == "CL2", "Commercial", "Wild"))
fis_df <- melt(basicstat$Fis, varnames=c('Index', 'Sample'), value.name = 'FIS', na.rm=TRUE) %>%
mutate(Sample = recode(Sample, FI = 'CL1', NEH = 'CL2')) %>%
mutate(Type = ifelse(Sample == "CL1" | Sample == "CL2", "Commercial", "Wild"))
fis_df <- melt(basicstat$Fis, varnames=c('Index', 'Sample'), value.name = 'FIS', na.rm=TRUE) %>%
mutate(Sample = recode(Sample, FI = "CL1", NEH = "CL2")) %>%
mutate(Type = ifelse(Sample == "CL1" | Sample == "CL2", "Commercial", "Wild"))
fis_df <- melt(basicstat$Fis, varnames=c('Index', 'Sample'), value.name = 'FIS', na.rm=TRUE) %>%
mutate(Sample = recode(Sample, FI = "CL1", NEH = "CL2")) %>%
mutate(Type = ifelse(Sample == "CL1" | Sample == "CL2", "Commercial", "Wild"))
fis_df <- melt(basicstat$Fis, varnames=c('Index', 'Sample'), value.name = 'FIS', na.rm=TRUE) %>%
mutate(Sample = recode(Sample, FI = "CL1", NEH = "CL2")) %>%
mutate(Type = ifelse(Sample == "CL1" | Sample == "CL2", "Commercial", "Wild"))
FIS <- ggplot(fis_df, aes(x=variable, y=Fis, fill = Type)) + geom_boxplot()
FIS <- FIS + xlab("Population")
FIS <- FIS + ylab("Observed Heterozygosity")
FIS <- FIS + theme_bw() + ggtitle("Observed Heterozygosity") + ylim(0,1)
plot(FIS)
FIS <- ggplot(fis_df, aes(x=Sample, y=Fis, fill = Type)) + geom_boxplot()
FIS <- FIS + xlab("Population")
FIS <- FIS + ylab("Observed Heterozygosity")
FIS <- FIS + theme_bw() + ggtitle("Observed Heterozygosity") + ylim(0,1)
plot(FIS)
FIS <- ggplot(fis_df, aes(x=Sample, y=FIS, fill = Type)) + geom_boxplot()
FIS <- FIS + xlab("Population")
FIS <- FIS + ylab("Observed Heterozygosity")
FIS <- FIS + theme_bw() + ggtitle("Observed Heterozygosity") + ylim(0,1)
plot(FIS)
FIS <- ggplot(fis_df, aes(x=Sample, y=FIS, fill = Type)) + geom_boxplot()
FIS <- FIS + xlab("Population")
FIS <- FIS + ylab(bquote(F[IS])
FIS <- FIS + theme_bw() + ggtitle(bquote(F[IS]*" per Population") + ylim(-1,1)
FIS <- ggplot(fis_df, aes(x=Sample, y=FIS, fill = Type)) + geom_boxplot()
FIS <- FIS + xlab("Population")
FIS <- FIS + ylab(bquote(F[IS]))
FIS <- FIS + theme_bw() + ggtitle(bquote(F[IS]*" per Population") + ylim(-1,1)
plot(FIS)
FIS <- ggplot(fis_df, aes(x=Sample, y=FIS, fill = Type)) + geom_boxplot()
FIS <- FIS + xlab("Population")
FIS <- FIS + ylab(bquote(F[IS]))
FIS <- FIS + theme_bw() + ggtitle(bquote(F[IS]*" per Population")) + ylim(-1,1)
plot(FIS)
round(colMeans(het_results[,c(3:8)], na.rm = TRUE), digits = 3)
het_results <- genetic_diff(RISG, pop=as.factor(poplist.names), method= 'nei')
round(colMeans(het_results[,c(3:8)], na.rm = TRUE), digits = 3)
library(reshape2)
het_df <- melt(het_results[,c(3:8)], varnames=c('Index', 'Sample'), value.name = 'Heterozygosity', na.rm=TRUE) %>%
mutate(variable = recode(variable, Hs_CL1 = 'CL1', Hs_CL2 = 'CL2', Hs_MV = "MV", Hs_NR = "NR", Hs_GH = "GH", Hs_CT = "CT")) %>%
mutate(Type = ifelse(variable == "CL1" | variable == "CL2", "Commercial", "Wild"))
library(ggplot2)
Het <- ggplot(het_df, aes(x=variable, y=Heterozygosity, fill = Type)) + geom_boxplot()
Het <- Het + xlab("Population")
Het <- Het + ylab("Observed Heterozygosity")
Het <- Het + theme_bw() + ggtitle("Observed Heterozygosity") + ylim(0,1)
plot(Het)
library(adegenet)
library(hierfstat)
RISG_genind <- vcfR2genind(RISG)
strata(RISG_genind) <- Samples
setPop(RISG_genind) <- ~Population
shapiro.test(basicstat$Fis)
ks.test(basicstat$Fis)
ks.test(basicstat$Fis, "pnorm")
#First we test for normality using a Kolmogorov-Smirnov Test
ks.test(basicstat$Fis, "pnorm")
#The data is not normally distributed, we should proceed with a Kruskall test
kruskal.test(RISG_Fis$F ~ RISG_Fis$FID)
#First we test for normality using a Kolmogorov-Smirnov Test
ks.test(fis_df$FIS, "pnorm")
#The data is not normally distributed, we should proceed with a Kruskall test
kruskal.test(fis_df$FIS ~ fis_df$Sample)
dunn.test(RISG_Fis$F, g = RISG_Fis$FID, method  = "bonferroni")
#First we test for normality using a Kolmogorov-Smirnov Test
ks.test(fis_df$FIS, "pnorm")
#The data is not normally distributed, we should proceed with a Kruskall test
kruskal.test(fis_df$FIS ~ fis_df$Sample)
#The populations are significantly different, we should use a Dunn-Test post-hoc
dunn.test(fis_df$FIS, g = fis_df$Sample, method  = "bonferroni")
#First we test for normality using a Kolmogorov-Smirnov Test
ks.test(fis_df$FIS, "pnorm")
#The data is not normally distributed, we should proceed with a Kruskall test
kruskal.test(fis_df$FIS ~ fis_df$Sample)
#The populations are significantly different, we should use a Dunn-Test post-hoc
library(dunn.test)
dunn.test(fis_df$FIS, g = fis_df$Sample, method  = "bonferroni")
#First we test for normality using a Kolmogorov-Smirnov Test
ks.test(het_df$Heterozygosity, "pnorm")
#The data is not normally distributed, we should proceed with a Kruskall test
kruskal.test(het_df$Heterozygosity ~ het_df$variable)
#The populations are significantly different, we should use a Dunn-Test post-hoc
library(dunn.test)
dunn.test(het_df$Heterozygosity, g = het_df$variable, method  = "bonferroni")
View(basicstat)
View(basicstat)
basicstat <- basic.stats(RISG_genind, diploid = TRUE, digits = 3)
round(colMeans(basicstat$Fis[,c(3:8)], na.rm = TRUE), digits = 3)
View(basicstat$Fis)
round(colMeans(basicstat$Fis[,c(1:6)], na.rm = TRUE), digits = 3)
#Genetix file created with PGDSpider
RISG <- read.genetix('RISG.gtx')
library(adegenet)
library(hierfstat)
RISG_genind <- vcfR2genind(RISG)
library(adegenet)
library(hierfstat)
RISG_genid2 <- read.genetix('RISG.gtx')
basicstat2 <- basic.stats(RISG_genind2, diploid = TRUE, digits = 3)
library(adegenet)
library(hierfstat)
RISG_genid2 <- read.genetix('RISG.gtx')
basicstat2 <- basic.stats(RISG_genid2, diploid = TRUE, digits = 3)
View(basicstat2)
view(basicstat2$Fis)
View(basicstat$Fis)
library(vcfR)
RISG <- read.vcfR("../Filtering/RISG.vcf")
Samples <- read.table("Samples.txt", header = TRUE) %>%
mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
het_results <- genetic_diff(RISG, pop=as.factor(poplist.names), method= 'nei')
round(colMeans(het_results[,c(3:8)], na.rm = TRUE), digits = 3)
library(reshape2)
het_df <- melt(het_results[,c(3:8)], varnames=c('Index', 'Sample'), value.name = 'Heterozygosity', na.rm=TRUE) %>%
mutate(variable = recode(variable, Hs_CL1 = 'CL1', Hs_CL2 = 'CL2', Hs_MV = "MV", Hs_NR = "NR", Hs_GH = "GH", Hs_CT = "CT")) %>%
mutate(Type = ifelse(variable == "CL1" | variable == "CL2", "Commercial", "Wild"))
#First we test for normality using a Kolmogorov-Smirnov Test
ks.test(het_df$Heterozygosity, "pnorm")
#The data is not normally distributed, we should proceed with a Kruskall test
kruskal.test(het_df$Heterozygosity ~ het_df$variable)
#The populations are significantly different, we should use a Dunn-Test post-hoc
library(dunn.test)
dunn.test(het_df$Heterozygosity, g = het_df$variable, method  = "bonferroni")
library(ggplot2)
Het <- ggplot(het_df, aes(x=variable, y=Heterozygosity, fill = Type)) + geom_boxplot()
Het <- Het + xlab("Population")
Het <- Het + ylab("Observed Heterozygosity")
Het <- Het + theme_bw() + ggtitle("Observed Heterozygosity") + ylim(0,1)
plot(Het)
library(adegenet)
library(hierfstat)
RISG_genind <- vcfR2genind(RISG)
strata(RISG_genind) <- Samples
setPop(RISG_genind) <- ~Population
basicstat <- basic.stats(RISG_genind, diploid = TRUE, digits = 3)
round(colMeans(basicstat$Fis[,c(1:6)], na.rm = TRUE), digits = 3)
fis_df <- melt(basicstat$Fis, varnames=c('Index', 'Sample'), value.name = 'FIS', na.rm=TRUE) %>%
mutate(Sample = recode(Sample, FI = "CL1", NEH = "CL2")) %>%
mutate(Type = ifelse(Sample == "CL1" | Sample == "CL2", "Commercial", "Wild"))
#First we test for normality using a Kolmogorov-Smirnov Test
ks.test(fis_df$FIS, "pnorm")
#The data is not normally distributed, we should proceed with a Kruskall test
kruskal.test(fis_df$FIS ~ fis_df$Sample)
#The populations are significantly different, we should use a Dunn-Test post-hoc
dunn.test(fis_df$FIS, g = fis_df$Sample, method  = "bonferroni")
FIS <- ggplot(fis_df, aes(x=Sample, y=FIS, fill = Type)) + geom_boxplot()
FIS <- FIS + xlab("Population")
FIS <- FIS + ylab(bquote(F[IS]))
FIS <- FIS + theme_bw() + ggtitle(bquote(F[IS]*" per Population")) + ylim(-1,1)
plot(FIS)
library(adegenet)
library(hierfstat)
library(vcfR)
#RISG <- read.vcfR("../Filtering/RISG.vcf")
RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
strata(RISG_genind) <- Samples
setPop(RISG_genind) <- ~Population
library(adegenet)
library(hierfstat)
library(vcfR)
#RISG <- read.vcfR("../Filtering/RISG.vcf")
RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
Samples <- read.table("Samples.txt", header = TRUE) %>%
mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
library(adegenet)
library(hierfstat)
library(vcfR)
#RISG <- read.vcfR("../Filtering/RISG.vcf")
RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
Samples <- read.table("../GeneticDiversity/Samples.txt", header = TRUE) %>%
mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
strata(RISG_genind) <- Samples
setPop(RISG_genind) <- ~Population
library(adegenet)
library(hierfstat)
library(vcfR)
#RISG <- read.vcfR("../Filtering/RISG.vcf")
RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
Samples <- read.table("../GeneticDiversity/Samples.txt", header = TRUE) %>%
mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
strata(RISG_genind) <- Samples
setPop(RISG_genind) <- ~Population
Fst_Hier <- as.data.frame(pairwise.WCfst(RISG_genind))
write.csv(Fst_Hier, "Fst_Hier.csv")
library(adegenet)
library(hierfstat)
library(vcfR)
#RISG <- read.vcfR("../Filtering/RISG.vcf")
RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
library(adegenet)
library(hierfstat)
library(vcfR)
#RISG <- read.vcfR("../Filtering/RISG.vcf")
RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
Samples <- read.table("../GeneticDiversity/Samples.txt", header = TRUE) %>%
mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
library(adegenet)
library(hierfstat)
library(vcfR)
library(tidyverse)
#RISG <- read.vcfR("../Filtering/RISG.vcf")
RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
Samples <- read.table("../GeneticDiversity/Samples.txt", header = TRUE) %>%
mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
strata(RISG_genind) <- Samples
setPop(RISG_genind) <- ~Population
Perloc <- pp.fst(RISG_genind)
library(adegenet)
library(hierfstat)
library(vcfR)
library(tidyverse)
#RISG <- read.vcfR("../Filtering/RISG.vcf")
RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
#Samples <- read.table("../GeneticDiversity/Samples.txt", header = TRUE) %>%
#  mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
#poplist.names <- Samples$Population
#strata(RISG_genind) <- Samples
#setPop(RISG_genind) <- ~Population
Perloc <- pp.fst(RISG_genind)
library(adegenet)
library(hierfstat)
library(vcfR)
library(tidyverse)
#RISG <- read.vcfR("../Filtering/RISG.vcf")
RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
Samples <- read.table("../GeneticDiversity/Samples.txt", header = TRUE) %>%
mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
strata(RISG_genind) <- Samples
setPop(RISG_genind) <- ~Population
Perloc <- pp.fst(RISG_genind)
Perloc <- pp.fst(RISG_genind)
library(adegenet)
library(hierfstat)
library(vcfR)
library(tidyverse)
#RISG <- read.vcfR("../Filtering/RISG.vcf")
#RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
Samples <- read.table("../GeneticDiversity/Samples.txt", header = TRUE) %>%
mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
strata(RISG_genind) <- Samples
setPop(RISG_genind) <- ~Population
Perloc <- pp.fst(RISG_genind)
View(RISG_genind)
Perloc <- pp.fst(RISG_genind)
traceback()
library(adegenet)
library(hierfstat)
library(vcfR)
library(tidyverse)
RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
Samples <- read.table("../GeneticDiversity/Samples.txt", header = TRUE)
#%>%
#  mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
strata(RISG_genind) <- Samples
setPop(RISG_genind) <- ~Population
Perloc <- pp.fst(RISG_genind)
View(RISG_genind)
library(adegenet)
library(hierfstat)
library(vcfR)
library(tidyverse)
RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
Samples <- read.table("../GeneticDiversity/Samples.txt", header = TRUE)
#%>%
#  mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
#strata(RISG_genind) <- Samples
setPop(RISG_genind) <- ~Population
Perloc <- pp.fst(RISG_genind)
View(RISG_genind)
library(adegenet)
library(hierfstat)
library(vcfR)
library(tidyverse)
RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
Samples <- read.table("../GeneticDiversity/Samples.txt", header = TRUE)
#%>%
#  mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
strata(RISG_genind) <- Samples
setPop(RISG_genind) <- ~Population
Perloc <- pp.fst(RISG_genind)
View(RISG_genind)
traceback()
view(RISG_genind$hierarchy)
view(RISG_genind$strata)
View(pp.sigma.loc(CT1, NR3, RISG_genind)
q()
View(pp.sigma.loc(CT1, NR3, RISG_genind))
View(pp.sigma.loc(CT, NR, RISG_genind))
library(adegenet)
library(hierfstat)
library(vcfR)
library(tidyverse)
RISG_genind <- vcfR2genind(read.vcfR("../Filtering/RISG.vcf"))
Samples <- read.table("../GeneticDiversity/Samples.txt", header = TRUE)
#%>%
#  mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
strata(RISG_genind) <- Samples
setPop(RISG_genind) <- ~Population
Perloc <- wc(RISG_genind)
#Fst_Hier <- as.data.frame(pairwise.WCfst(RISG_genind))
#write.csv(Fst_Hier, "Fst_Hier.csv")
View(Perloc)
View(Perloc$FST)
View(het_df)
aggregate(variable ~ Heterozygosity, data = het_fs, mean)
aggregate(variable ~ Heterozygosity, data = het_df, mean)
aggregate(Heterozygosity ~ variable, data = het_df, mean)
Fst <- aggregate(Heterozygosity ~ variable, data = het_df, mean)
rm(Fst)
Fst_manual <- aggregate(Heterozygosity ~ variable, data = het_df, mean)
Fst_manual <- aggregate(Heterozygosity ~ variable, data = het_df, mean)
summary(het_df)
View(Fst_manual)
# Create a sample dataset
Ht = 0.3708
# Calculate pairwise Fst values
test_pairwise_fst <- matrix(NA, nrow = 6, ncol = 6, dimnames = list(poplist.names, poplist.names))
# Create a sample dataset
Ht = 0.3708
# Calculate pairwise Fst values
test_pairwise_fst <- matrix(NA, nrow = 6, ncol = 6, dimnames = list(Fst_manual$variable, Fst_manual$variable))
for (i in 1:6) {
for (j in 1:6) {
if (i == j) {
test_pairwise_fst[i, j] <- 0  # Diagonal elements are set to 0
} else {
test_pairwise_fst[i, j] <- (Ht - Fst_manual[i] - Fst_manual[j]) / Ht
}
}
}
5-6
# Create a sample dataset
Ht = 0.3708
# Calculate pairwise Fst values
test_pairwise_fst <- matrix(NA, nrow = 6, ncol = 6, dimnames = list(Fst_manual$variable, Fst_manual$variable))
for (i in 1:6) {
for (j in 1:6) {
if (i == j) {
test_pairwise_fst[i, j] <- 0  # Diagonal elements are set to 0
} else {
test_pairwise_fst[i, j] <- (Ht - Fst_manual[i]-Fst_manual[j]) / Ht
}
}
}
(Ht-((0.3674107-0.370604)/2))/Ht
(Ht-((0.3674107+0.370604)/2))/Ht
View(Fst_Hier)
summary(Het_results)
summary(het_results)
Ht <- 0.3934
(Ht-((0.3674107+0.370604)/2))/Ht
(Ht-((0.3935+0.3706)/2))/Ht
(Ht-((0.674+0.3706)/2))/Ht
(Ht-((0.3674+0.3706)/2))/Ht
summary(Fst_manual)
summary(het_df)
#First we test for normality using a Kolmogorov-Smirnov Test
ks.test(fis_df$FIS, "pnorm")
#The data is not normally distributed, we should proceed with a Kruskall test
kruskal.test(fis_df$FIS ~ fis_df$Sample)
#The populations are significantly different, we should use a Dunn-Test post-hoc
dunn.test(fis_df$FIS, g = fis_df$Sample, method  = "bonferroni")
write.csv(het_df, "Heterozygosity.csv")
FIS <- ggplot(fis_df, aes(x=Sample, y=FIS, fill = Type)) + geom_boxplot()
library(ggplot2)
FIS <- ggplot(fis_df, aes(x=Sample, y=FIS, fill = Type)) + geom_boxplot()
FIS <- FIS + xlab("Population")
FIS <- FIS + ylab(bquote(F[IS]))
FIS <- FIS + theme_bw() + ggtitle(bquote(F[IS]*" per Population")) + ylim(-1,1)
plot(FIS)
write.csv(fis_df, "fis_df.csv")
#First we test for normality using a Kolmogorov-Smirnov Test
lapply(split(NIN_Size$Length, NIN_Size$Line), shapiro.test)
#First we test for normality using a Kolmogorov-Smirnov Test
lapply(split(het_df$Heterozygosity, het_df$variable), shapiro.test)
#First we test for normality using a Kolmogorov-Smirnov Test
lapply(split(het_df$Heterozygosity, het_df$variable), ks.test)
#First we test for normality using a Kolmogorov-Smirnov Test
lapply(split(het_df$Heterozygosity, het_df$variable), ks.test("norm"))
#First we test for normality using a Kolmogorov-Smirnov Test
lapply(split(het_df$Heterozygosity, het_df$variable), ks.test(,"pnorm"))
#First we test for normality using a Kolmogorov-Smirnov Test
lapply(split(het_df$Heterozygosity, het_df$variable), ks.test(het_df$Heterozygosity,"pnorm"))
#First we test for normality using a Kolmogorov-Smirnov Test
lapply(split(het_df$Heterozygosity, het_df$variable), ks.test( ,"pnorm"))
#First we test for normality using a Kolmogorov-Smirnov Test
lapply(split(het_df$Heterozygosity, het_df$variable), ks.test)
#First we test for normality using a Kolmogorov-Smirnov Test
lapply(split(het_df$Heterozygosity, het_df$variable), ks.tes, "pnorm")
#First we test for normality using a Kolmogorov-Smirnov Test
lapply(split(het_df$Heterozygosity, het_df$variable), ks.test, "pnorm")
#The data is not normally distributed, we should proceed with a Kruskall test
kruskal.test(het_df$Heterozygosity ~ het_df$variable)
#The populations are significantly different, we should use a Dunn-Test post-hoc
library(dunn.test)
dunn.test(het_df$Heterozygosity, g = het_df$variable, method  = "bonferroni")
#First we test for normality using a Kolmogorov-Smirnov Test
lapply(split(fis_df$FIS, fis_df$Sample), ks.test, "pnorm")
#The data is not normally distributed, we should proceed with a Kruskall test
kruskal.test(fis_df$FIS ~ fis_df$Sample)
#The populations are significantly different, we should use a Dunn-Test post-hoc
dunn.test(fis_df$FIS, g = fis_df$Sample, method  = "bonferroni")
library(ggplot2)
FisHist <- ggplot(aes(x=FIS, col=I("black"), fill=Type), data = fis_df) +   geom_histogram(binwidth = 0.05) +
facet_wrap(~ variable)
plot(FisHist)
View(fis_df)
FisHist <- ggplot(aes(x=FIS, col=I("black"), fill=Type), data = fis_df) +   geom_histogram(binwidth = 0.05) +
facet_wrap(~ Sample)
plot(FisHist)
FisHist <- ggplot(aes(x=FIS, col=I("black"), fill=Type), data = fis_df) +   geom_histogram() +
facet_wrap(~ Sample)
plot(FisHist)
View(basicstat$n.ind.samp)
View(basicstat$Fis)
