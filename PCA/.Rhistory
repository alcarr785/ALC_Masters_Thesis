filter(Date == "19-Oct-22") %>%
#Removing oysters with missing tags
filter(`Pit Tag End Num` != "no tag") %>%
filter(!is.na(Length)) %>%
#Keeping only relevant information
select(Date, Lineage, `Pit Tag End Num`, Length, `Bag Number`, Status) %>%
group_by(Lineage, `Bag Number`) %>%
#Defining oysters as either wild or commercial
mutate(Type = ifelse(Lineage == "CL1" | Lineage == "CL2", "Commercial", "Wild")) %>%
#Removing Bag 1 from GH, because many oysters had spilled out of it
mutate(Rm = ifelse(Lineage == "GH" & `Bag Number` == "1", 1, 0)) %>%
mutate(`Bag Number` <- as.factor(`Bag Number`)) %>%
filter(Rm != 1) %>%
mutate(Survived = ifelse(Status == "Alive" | Status == "alive" | Status =="alive, no pic", 1, 0)) %>%
select(Lineage, `Bag Number`, Type, `Pit Tag End Num`, Survived, Length) %>%
mutate(Survived = as.numeric(Survived)) #%>%
#mutate(Length = as.numeric(Length))
living_oyster <- growth_sur %>%
filter(Survived == 1, !is.na(Length))
#Statistical test for growth
shapiro.test(living_oyster$Length)
growth_sur <- data %>%
#Renaming commercial lines to keep them anonymous
mutate(Lineage = recode(Lineage, FI="CL1", NEH="CL2")) %>%
#Fixing a mistake in the sheet where lineage was accidentally entered as "Mv" instead of "MV"
mutate(Lineage = recode(Lineage, Mv="MV")) %>%
#Keeping only oysters recored at the end of the study.
filter(Date == "19-Oct-22") %>%
#Removing oysters with missing tags
filter(`Pit Tag End Num` != "no tag") %>%
filter(!is.na(Length)) %>%
#Keeping only relevant information
select(Date, Lineage, `Pit Tag End Num`, Length, `Bag Number`, Status) %>%
group_by(Lineage, `Bag Number`) %>%
#Defining oysters as either wild or commercial
mutate(Type = ifelse(Lineage == "CL1" | Lineage == "CL2", "Commercial", "Wild")) %>%
#Removing Bag 1 from GH, because many oysters had spilled out of it
mutate(Rm = ifelse(Lineage == "GH" & `Bag Number` == "1", 1, 0)) %>%
mutate(`Bag Number` <- as.factor(`Bag Number`)) %>%
filter(Rm != 1) %>%
mutate(Survived = ifelse(Status == "Alive" | Status == "alive" | Status =="alive, no pic", 1, 0)) %>%
select(Lineage, `Bag Number`, Type, `Pit Tag End Num`, Survived, Length) %>%
mutate(Survived = as.numeric(Survived)) %>%
mutate(Length = as.numeric(Length))
living_oyster <- growth_sur %>%
filter(Survived == 1, !is.na(Length))
#Statistical test for growth
shapiro.test(living_oyster$Length)
growth_kw <- kruskal.test(living_oyster$Length ~ living_oyster$Lineage)
summary(growth_kw)
print(growth_kw)
kruskal.test(living_oyster$Length ~ living_oyster$Lineage)
install.packages(dunn.test)
install.packages("dunn.test")
library(dunn.test)
dunn.test(living_oyster$Length, g = living_oyster$Lineage, method  = "bonferroni")
#Statistical tests for disease intensity
shapiro.test(disease$`Dermo Intensity`)
shapiro.test(disease$`MSX Intensity`)
kruskal.test(disease$`Dermo Intensity` ~ disease$Lineage)
dunn.test(disease$`Dermo Intensity`, g = disease$Lineage, method  = "bonferroni")
kruskal.test(disease$`MSX Intensity` ~ disease$Lineage)
dunn.test(disease$`MSX Intensity`, g = disease$Lineage, method  = "bonferroni")
disease_intensity <- disease %>%
subset(`Sample ID` != 'NR-209') %>%
group_by(Lineage, Type) %>%
mutate(Dermo_Infected = ifelse(`Dermo Cq` > 0, 1, 0)) %>%
mutate(MSX_Infected = ifelse(`MSX Cq` > 0, 1, 0)) %>%
mutate(SSO_Infected = ifelse(`SSO Cq` > 0, 1, 0)) %>%
summarize(Dermo_Intensity = sum(Dermo_Infected/n()), MSX_Intensity = sum(MSX_Infected/n()), SSO_Intensity = sum(SSO_Infected/n()))
write.csv(disease_intensity, "Disease Intensity.csv")
#Changing values in Fis
RISG_Fis <- RISG_Fis %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(Lineage == "CL1" | Lineage == "CL2", "Commercial", "Wild"))
#Changing values in Fis
RISG_Fis <- RISG_Fis %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild"))
#Graphing Fis
ggplot(RISG_Fis, aes(x=FID, y = F))+
geom_boxplot()+
labs(x = "Lineage", y="F[IS]")+
ggtitle("F[IS] per Lineage")
#Graphing Fis
ggplot(RISG_Fis, aes(x=FID, y = F))+
geom_boxplot()+
ylim(-0.1, 0.2)+
labs(x = "Lineage", y="F[IS]")+
ggtitle("F[IS] per Lineage")
#Graphing Fis
ggplot(RISG_Fis, aes(x=FID, y = F))+
geom_boxplot()+
ylim(-0.5, 0.15)+
labs(x = "Lineage", y="F[IS]")+
ggtitle("F[IS] per Lineage")
#Graphing Fis
ggplot(RISG_Fis, aes(x=FID, y = F))+
geom_boxplot()+
ylim(-0.05, 0.15)+
labs(x = "Lineage", y="F[IS]")+
ggtitle("F[IS] per Lineage")
#Graphing Fis
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.15)+
labs(x = "Lineage", y="F[IS]")+
ggtitle("F[IS] per Lineage")
RISG.FIT <- read.csv("C:/Users/angel/OneDrive/Documents/Masters Work/Lab Work/ALC_Masters_Thesis/GeneticDiversity/FIS/RISG.FIT.het", sep="")
View(RISG.FIT)
ggplot(RISG_FIS, aes(X=FID, y = F))+
geom_boxplot()
ggplot(RISG.FIT, aes(X=FID, y = F))+
geom_boxplot()
ggplot(RISG.FIT, aes(x=FID, y = F))+
geom_boxplot()
ggplot(RISG.FIT, aes(x=FID, y = F))+
geom_boxplot()+
ylim(-0.05, 0.15)+
labs(x = "Lineage", y="F[IT]")+
ggtitle("F[IT] per Lineage")
rm RISG.FIT
rm(RISG.FIT)
library(readr)
RISG_Fit <- read_table2("C:/Users/angel/OneDrive/Documents/Masters Work/Lab Work/ALC_Masters_Thesis/GeneticDiversity/FIS/RISG.FIT.het")
View(RISG_Fit)
RISG_Fit <- RISG_Fit %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild"))
ggplot(RISG.FIT, aes(x=FID, y = F))+
geom_boxplot()+
ylim(-0.05, 0.15)+
labs(x = "Lineage", y="F[IT]")+
ggtitle("F[IT] per Lineage")
ggplot(RISG_Fit, aes(x=FID, y = F))+
geom_boxplot()+
ylim(-0.05, 0.15)+
labs(x = "Lineage", y="F[IT]")+
ggtitle("F[IT] per Lineage")
ggplot(RISG_Fit, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.2)+
labs(x = "Lineage", y="F[IT]")+
ggtitle("F[IT] per Lineage")
#Graphing Fis and Fit
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.2)+
labs(x = "Lineage", y="F[IS]")+
ggtitle("F[IS] per Lineage")
#Graphing Fis and Fit
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.2)+
labs(x = "Lineage", y=bquote(F[IS]))
#Graphing Fis and Fit
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.2)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]) + "per Lineage")
#Graphing Fis and Fit
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.2)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]) "per Lineage")
#Graphing Fis and Fit
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.2)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS] per Lineage))
#Graphing Fis and Fit
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.2)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]*"per Lineage"))
#Graphing Fis and Fit
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.2)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]*" per Lineage"))
#Graphing Fis and Fit
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.15)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]*" per Lineage"))
#Graphing Allelic Richness
Allelic_richness <- read.csv("Allelic richness.csv")
#Graphing Allelic Richness
Allelic_richness <- read.csv("Allelic_richness.csv")
View(Allelic_richness)
AR_long <- gather(df, key = "Population", value = "Richness", -X)
AR_long <- gather(Allelic_richness, key = "Population", value = "Richness", -X)
View(AR_long)
AR_long <- gather(Allelic_richness, key = "Lineage", value = "Richness", -X) %>%
mutate(FID = recode(Lineage, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(Lineage == "CL1" | Lineage == "CL2", "Commercial", "Wild"))
AR_long <- gather(Allelic_richness, key = "Lineage", value = "Richness", -X) %>%
mutate(FID = recode(Lineage, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(Lineage == "CL1" | Lineage == "CL2", "Commercial", "Wild"))
View(AR_long)
AR_long <- gather(Allelic_richness, key = "Lineage", value = "Richness", -X) %>%
mutate(Lineage = recode(Lineage, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(Lineage == "CL1" | Lineage == "CL2", "Commercial", "Wild"))
ggplot(df_long, aes(x = Lineage, y = Size, fill = Type)) +
geom_boxplot() +
labs(x = "Lineage", y="Allelic Richness")+
ggtitle("Allelic Richness by Lineage")
ggplot(AR_long, aes(x = Lineage, y = Size, fill = Type)) +
geom_boxplot() +
labs(x = "Lineage", y="Allelic Richness")+
ggtitle("Allelic Richness by Lineage")
ggplot(AR_long, aes(x = Lineage, y = Richness, fill = Type)) +
geom_boxplot() +
labs(x = "Lineage", y="Allelic Richness")+
ggtitle("Allelic Richness by Lineage")
library(readr)
FI <- read_table2("C:/Users/angel/OneDrive/Documents/Masters Work/Lab Work/ALC_Masters_Thesis/GeneticDiversity/HWE/FI.hwe")
View(FI)
library(readr)
CT <- read_table2("C:/Users/angel/OneDrive/Documents/Masters Work/Lab Work/ALC_Masters_Thesis/GeneticDiversity/HWE/CT.hwe")
View(CT)
#Changing values in Fis and Fit
RISG_Fis <- RISG_Fis %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild"))
library(ggplot)
library(readr)
library(tidyverse)
library(dunn.test)
#Changing values in Fis and Fit
RISG_Fis <- RISG_Fis %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild"))
library(readr)
RISG_Fis <- read_table2("C:/Users/angel/OneDrive/Documents/Masters Work/Lab Work/ALC_Masters_Thesis/GeneticDiversity/FIS/RISG.FIS.het")
View(RISG_Fis)
#Changing values in Fis and Fit
RISG_Fis <- RISG_Fis %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild"))
#Graphing Fis and Fit
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.15)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]*" per Lineage"))
#Graphing Allelic Richness
Allelic_richness <- read.csv("Allelic_richness.csv")
AR_long <- gather(Allelic_richness, key = "Lineage", value = "Richness", -X) %>%
mutate(Lineage = recode(Lineage, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(Lineage == "CL1" | Lineage == "CL2", "Commercial", "Wild"))
ggplot(AR_long, aes(x = Lineage, y = Richness, fill = Type)) +
geom_boxplot() +
labs(x = "Lineage", y="Allelic Richness")+
ggtitle("Allelic Richness by Lineage")
setwd("C:/Users/angel/OneDrive/Documents/Masters Work/Lab Work/ALC_Masters_Thesis/GeneticDiversity")
RISG.wild <- read.genetix('RISG.wild.gtx')
library(adegenet)
library(hierfstat)
library(pegas)
library(genetics)
RISG.wild <- read.genetix('RISG.wild.gtx')
#Getting pairwise Fst values
RISG_wild_fst <- pairwise.WCfst(RISG_wild)
#Getting pairwise Fst values
RISG_wild_fst <- pairwise.WCfst(RISG.wild)
View(RISG_wild_fst)
RISG_wild_fst <- as.data.frame(RISG_wild_fst)
write.csv(RISG_wild_fst, "FST.wild.csv")
library(adegenet)
library(hierfstat)
library(pegas)
#Genetix file created with PGDSpider
RISG <- read.genetix('RISG.gtx')
#Getting pairwise Fst values
RISG_fst <- pairwise.WCfst(RISG)
RISG_fst <- as.data.frame(RISG_fst)
View(RISG_fst)
#Getting Fis data
RISG_FIS <- ("FIS/RISG.het")
#Getting Fis data
RISG_FIS <- read.table("FIS/RISG.het", sep = " ", header = TRUE)
#Getting Fis data
RISG_FIS <- read.table("/FIS/RISG.het", sep = " ", header = TRUE)
#Getting Fis data
RISG_FIS <- read.table("RISG.het", sep = " ", header = TRUE)
#Getting Fis data
RISG_FIS <- read.table("RISG.fis", sep = " ", header = TRUE)
#Getting Fis data
RISG_FIS <- read.table("RISG.fis", sep = "/t", header = TRUE)
#Changing values in Fis and Fit
RISG_Fis <- RISG_FIS %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild"))
#Getting Fis data
RISG_FIS <- read.table("RISG.fis", sep = "/t", header = TRUE)
library(readr)
RISG <- read_table("RISG.fis")
View(RISG)
#Changing values in Fis and Fit
RISG_Fis <- RISG %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild"))
library(tidyverse)
#Changing values in Fis and Fit
RISG_Fis <- RISG %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild"))
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.15)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]*" per Lineage"))
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.12)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]*" per Lineage"))
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]*" per Lineage"))
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.12)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]*" per Lineage"))
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
labs(x = "Lineage", y="Observed Heterozygosity")+
ggtitle("Heterozygosity per Lineage")
ggplot(RISG_Fis, aes(x=FID, y = O(HOM), fill = Type))+
geom_boxplot()+
labs(x = "Lineage", y="Observed Heterozygosity")+
ggtitle("Heterozygosity per Lineage")
ggplot(RISG_Fis, aes(x=FID, y = `O(HOM)`, fill = Type))+
geom_boxplot()+
labs(x = "Lineage", y="Observed Heterozygosity")+
ggtitle("Heterozygosity per Lineage")
#Changing values in Fis
RISG_Fis <- RISG %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild")) %>%
Heterozygosity = `N((NM)-O(HOM))/N(NM)`
#Changing values in Fis
RISG_Fis <- RISG %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild")) %>%
Heterozygosity = (`N(NM)`-`O(HOM)`)/`N(NM)`
#Changing values in Fis
RISG_Fis <- RISG %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild")) %>%
Heterozygosity = (RISG$`N(NM)`-RISG$`O(HOM)`)/RISG$`N(NM)`
#Changing values in Fis
RISG_Fis <- RISG %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild")) %>%
mutate(Heterozygosity = (RISG$`N(NM)`-RISG$`O(HOM)`)/RISG$`N(NM)`)
View(RISG_Fis)
ggplot(RISG_Fis, aes(x=FID, y = Heterozygosity, fill = Type))+
geom_boxplot()+
labs(x = "Lineage", y="Observed Heterozygosity")+
ggtitle("Heterozygosity per Lineage")
ggplot(RISG_Fis, aes(x=FID, y = Heterozygosity, fill = Type))+
geom_boxplot()+
ylim(0.0, 0.4)+
labs(x = "Lineage", y="Observed Heterozygosity")+
ggtitle("Heterozygosity per Lineage")
ggplot(RISG_Fis, aes(x=FID, y = Heterozygosity, fill = Type))+
geom_boxplot()+
ylim(0.3, 0.4)+
labs(x = "Lineage", y="Observed Heterozygosity")+
ggtitle("Heterozygosity per Lineage")
#Changing values in Fis
RISG_Fis <- RISG %>%
mutate(FID = recode(FID, FI="CL1", NEH="CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild")) %>%
mutate(Heterozygosity = (RISG$`N(NM)`-RISG$`O(HOM)`)/RISG$`N(NM)`*100)
ggplot(RISG_Fis, aes(x=FID, y = Heterozygosity, fill = Type))+
geom_boxplot()+
ylim(30, 40)+
labs(x = "Lineage", y="Observed Heterozygosity")+
ggtitle("Heterozygosity per Lineage")
ggplot(RISG_Fis, aes(x=FID, y = Heterozygosity, fill = Type))+
geom_boxplot()+
ylim(30, 40)+
labs(x = "Lineage", y="Percent of Heterozygous Loci")+
ggtitle("Heterozygosity per Lineage")
ggplot(RISG_Fis, aes(x=FID, y = Heterozygosity, fill = Type))+
geom_boxplot()+
ylim(30, 40)+
labs(x = "Lineage", y="Percent of Heterozygous Loci (%)")+
ggtitle("Heterozygosity per Lineage")
ggplot(RISG_Fis, aes(x=FID, y = Heterozygosity, fill = Type))+
geom_boxplot()+
ylim(32.5, 40)+
labs(x = "Lineage", y="Percent of Heterozygous Loci (%)")+
ggtitle("Heterozygosity per Lineage")
setwd("C:/Users/angel/OneDrive/Documents/Masters Work/Lab Work/ALC_Masters_Thesis/PCA")
pca <- read_table2("RISG.all.eigenvec", col_names = FALSE)
eigenval <- scan("RISG.all.eigenval")
pca_wild <- read_table2("RISG.wild.eigenvec", col_names = FALSE)
eigenval_wild <- scan("RISG.wild.eigenval")
pca <- as.tibble(data.frame(pca, Population))
# set names
names(pca)[1] <- "Population"
names(pca)[2] <- "Indv"
names(pca)[3:ncol(pca)] <- paste0("PC", 1:(ncol(pca)-2))
names(pca_wild)[1] <- "Population"
names(pca_wild)[2] <- "Indv"
names(pca_wild)[3:ncol(pca_wild)] <- paste0("PC", 1:(ncol(pca)-2))
pca <- as.tibble(data.frame(pca, Population))
pca <- pca %>% mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2')) %>%
mutate(Type = ifelse(Population == "CL1" | Population == "CL2", "Commercial", "Wild"))
pca_wild <- as.tibble(data.frame(pca_wild, Population))
pca_wild <- pca_wild %>% mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
# set names
names(pca)[1] <- "Population"
names(pca)[2] <- "Indv"
names(pca)[3:ncol(pca)] <- paste0("PC", 1:(ncol(pca)-2))
names(pca_wild)[1] <- "Population"
names(pca_wild)[2] <- "Indv"
names(pca_wild)[3:ncol(pca_wild)] <- paste0("PC", 1:(ncol(pca)-2))
b <- ggplot(pca, aes(PC1, PC2, col = Population)) + geom_point(size = 3, aes(shape = Type))
b <- b + coord_equal() + theme_light() + scale_color_brewer(palette="Set1")
b <- b + xlab(paste0("PC1 (", signif(pve$pve[1], 3), "%)")) + ylab(paste0("PC2 (", signif(pve$pve[2], 3), "%)"))+ ggtitle("PC1 vs. PC2 All Populations")
plot(b)
pca <- read_table2("RISG.all.eigenvec", col_names = FALSE)
eigenval <- scan("RISG.all.eigenval")
# set names
names(pca)[1] <- "Population"
names(pca)[2] <- "Indv"
names(pca)[3:ncol(pca)] <- paste0("PC", 1:(ncol(pca)-2))
pca <- as.tibble(data.frame(pca, Population))
pca <- pca %>% mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2')) %>%
mutate(Type = ifelse(Population == "CL1" | Population == "CL2", "Commercial", "Wild"))
pve <- data.frame(PC = 1:20, pve = eigenval/sum(eigenval)*100)
a <- ggplot(pve, aes(PC, pve)) + geom_bar(stat = "identity")
a + ylab("Percentage variance explained") + theme_light()
b <- ggplot(pca, aes(PC1, PC2, col = Population)) + geom_point(size = 3, aes(shape = Type))
b <- b + coord_equal() + theme_light() + scale_color_brewer(palette="Set1")
b <- b + xlab(paste0("PC1 (", signif(pve$pve[1], 3), "%)")) + ylab(paste0("PC2 (", signif(pve$pve[2], 3), "%)"))+ ggtitle("PC1 vs. PC2 All Populations")
plot(b)
c <- ggplot(pca, aes(PC1, PC3, col = Population)) + geom_point(size = 3)
c <- c + coord_equal() + theme_light()
c <- c + xlab(paste0("PC1 (", signif(pve$pve[1], 3), "%)")) + ylab(paste0("PC3 (", signif(pve$pve[2], 3), "%)"))+ ggtitle("PC1 vs. PC3")
plot(c)
pca <- read_table2("RISG.wild.eigenvec", col_names = FALSE)
eigenval <- scan("RISG.wild.eigenval")
# set names
names(pca)[1] <- "Population"
names(pca)[2] <- "Indv"
names(pca)[3:ncol(pca)] <- paste0("PC", 1:(ncol(pca)-2))
pca <- as.tibble(data.frame(pca, Population))
pca <- pca %>% mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2')) %>%
mutate(Type = ifelse(Population == "CL1" | Population == "CL2", "Commercial", "Wild"))
b <- ggplot(pca, aes(PC1, PC2, col = Population)) + geom_point(size = 3, aes(shape = Type))
b <- b + coord_equal() + theme_light() + scale_color_brewer(palette="Set1")
b <- b + xlab(paste0("PC1 (", signif(pve$pve[1], 3), "%)")) + ylab(paste0("PC2 (", signif(pve$pve[2], 3), "%)"))+ ggtitle("PC1 vs. PC2 Wild Populations")
plot(b)
c <- ggplot(pca, aes(PC1, PC2, col = Population)) + geom_point(size = 3)
c <- c + coord_equal() + theme_light()
c <- c + xlab(paste0("PC1 (", signif(pve$pve[1], 3), "%)")) + ylab(paste0("PC2 (", signif(pve$pve[2], 3), "%)"))+ ggtitle("PC1 vs. PC2 Wild Populations")
plot(c)
c <- ggplot(pca, aes(PC1, PC2, col = Population)) + geom_point(size = 3)
c <- c + coord_equal() + theme_light() + scale_color_brewer(palette="Set1")
c <- c + xlab(paste0("PC1 (", signif(pve$pve[1], 3), "%)")) + ylab(paste0("PC2 (", signif(pve$pve[2], 3), "%)"))+ ggtitle("PC1 vs. PC2 Wild Populations")
plot(c)
pve <- data.frame(PC = 1:20, pve = eigenval/sum(eigenval)*100)
c <- ggplot(pca, aes(PC1, PC2, col = Population)) + geom_point(size = 3)
c <- c + coord_equal() + theme_light() + scale_color_brewer(palette="Set1")
c <- c + xlab(paste0("PC1 (", signif(pve$pve[1], 3), "%)")) + ylab(paste0("PC2 (", signif(pve$pve[2], 3), "%)"))+ ggtitle("PC1 vs. PC2 Wild Populations")
plot(c)
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.12)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]*" per Lineage"))
ggplot(RISG_Fis, aes(x=FID, y = Heterozygosity, fill = Type))+
geom_boxplot()+
ylim(32.5, 40)+
labs(x = "Lineage", y="Percent of Heterozygous Loci (%)")+
ggtitle("Heterozygosity per Lineage")
#Statistical test for Heterozygosity
shapiro.test(RISG_Fis$Heterozygosity)
kruskal.test(RISG_Fis$Heterozygosity ~ RISG_Fis$FID)
dunn.test(RISG_Fis$Heterozygosity, g = RISG_Fis$FID, method  = "bonferroni")
library(dunn.test)
dunn.test(RISG_Fis$Heterozygosity, g = RISG_Fis$FID, method  = "bonferroni")
RISG_fst <- as.data.frame(RISG_fst)
write.csv(RISG_fst, "FST.csv")
ggplot(RISG_Fis, aes(x=FID, y = F, fill = Type))+
geom_boxplot()+
ylim(-0.05, 0.12)+
labs(x = "Lineage", y=bquote(F[IS]))+
ggtitle(bquote(F[IS]*" per Lineage"))
#Statistical test for Fis
shapiro.test(RISG_Fis$F)
kruskal.test(RISG_Fis$F ~ RISG_Fis$FID)
dunn.test(RISG_Fis$F, g = RISG_Fis$FID, method  = "bonferroni")
#Statistical test for Heterozygosity
shapiro.test(RISG_Fis$Heterozygosity)
kruskal.test(RISG_Fis$Heterozygosity ~ RISG_Fis$FID)
dunn.test(RISG_Fis$Heterozygosity, g = RISG_Fis$FID, method  = "bonferroni")
summary(RISG_Fis)
