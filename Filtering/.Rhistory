library(hierfstat)
?pairwise.fst
install.packages("fstat")
library(adgenet)
library(adegenet)
?pairwise.fst
#Sequence variation
library(stringr)
library(strataG)
install.packages("strataG")
library(gdistance)
library(vegan)
library(knitr)
library(knitr)
pairwise_F<-pairwiseTest(cstr_g,stats="Fst",nrep=1000,quietly=T)
#Sequence variation
library(stringr)
library(strataG)
library(pegas,dependencies=TRUE)
library(raster)
#nucleotide diversity
library(pegas)
#STX in mtDNA
library(strataG)
library(gdistance)
library(ggplot2)
library(vegan)
library(knitr)
pairwise_F<-pairwiseTest(cstr_g,stats="Fst",nrep=1000,quietly=T)
library(tidyverse)
pca <- read_table("RISG.all.eigenvec", col_names = FALSE)
eigenval <- scan("RISG.all.eigenval")
pca_wild <- read_table2("RISG.wild.eigenvec", col_names = FALSE)
eigenval_wild <- scan("RISG.wild.eigenval")
# set names
names(pca)[1] <- "Population"
names(pca)[2] <- "Indv"
names(pca)[3:ncol(pca)] <- paste0("PC", 1:(ncol(pca)-1))
pca <- pca %>% mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2')) %>%
mutate(Type = ifelse(Population == "CL1" | Population == "CL2", "Commercial", "Wild"))
pve <- data.frame(PC = 1:20, pve = eigenval/sum(eigenval)*100)
PVE_all <- ggplot(pve, aes(PC, pve)) + geom_bar(stat = "identity")+
ylab("Percentage variance explained") + theme_light()+
ggtitle("Percent Variance Explained All Populations")
plot(PVE_all)
PCA_all <- ggplot(pca, aes(PC1, PC2, col = Population)) +
geom_point(size = 3, aes(shape = Type))
PCA_all <- PCA_all + coord_equal() + theme_light() + scale_color_brewer(palette="Set1")
PCA_all <- PCA_all + xlab(paste0("PC1 (", signif(pve$pve[1], 3), "%)")) + ylab(paste0("PC2 (", signif(pve$pve[2], 3), "%)"))+ ggtitle("PC1 vs. PC2 All Populations")
plot(PCA_all)
View(pca)
library(rstatix)
lmer()
library(lme4)
lmer()
PopandSite <- lmer(log(Length) ~ 1+Population+(1|Bag)+(Site), data = All_data)
library(tidyverse)
pca <- read_table("RISG.all.eigenvec", col_names = FALSE)
eigenval <- scan("RISG.all.eigenval")
pca_wild <- read_table2("RISG.wild.eigenvec", col_names = FALSE)
eigenval_wild <- scan("RISG.wild.eigenval")
# set names
names(pca)[1] <- "Population"
names(pca)[2] <- "Indv"
names(pca)[3:ncol(pca)] <- paste0("PC", 1:(ncol(pca)-1))
pca <- pca %>% mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2')) %>%
mutate(Type = ifelse(Population == "CL1" | Population == "CL2", "Commercial", "Wild"))
pve <- data.frame(PC = 1:20, pve = eigenval/sum(eigenval)*100)
PVE_all <- ggplot(pve, aes(PC, pve)) + geom_bar(stat = "identity")+
ylab("Percentage variance explained") + theme_light()+
ggtitle("Percent Variance Explained All Populations")
plot(PVE_all)
PCA_all <- ggplot(pca, aes(PC1, PC2, col = Population)) +
geom_point(size = 3, aes(shape = Type))
PCA_all <- PCA_all + coord_equal() + theme_light() + scale_color_brewer(palette="Set1")
PCA_all <- PCA_all + xlab(paste0("PC1 (", signif(pve$pve[1], 3), "%)")) + ylab(paste0("PC2 (", signif(pve$pve[2], 3), "%)"))+ ggtitle("PC1 vs. PC2 All Populations")
plot(PCA_all)
# set names
names(pca_wild)[1] <- "Population"
names(pca_wild)[2] <- "Indv"
names(pca_wild)[3:ncol(pca_wild)] <- paste0("PC", 1:(ncol(pca_wild)-1))
pve_wild <- data.frame(PC = 1:20, pve_wild = eigenval_wild/sum(eigenval_wild)*100)
PVE_wild <- ggplot(pve_wild, aes(PC, pve_wild)) + geom_bar(stat = "identity")+
ylab("Percentage variance explained") + theme_light()+
ggtitle("Percent Variance Explained Wild Populations")
plot(PVE_wild)
PCA_wild <- ggplot(pca_wild, aes(PC1, PC2, col = Population)) +
geom_point(size = 3)
PCA_wild <- PCA_wild + coord_equal() + theme_light() + scale_color_brewer(palette="Set1")
PCA_wild <- PCA_wild + xlab(paste0("PC1 (", signif(pve_wild$pve_wild[1], 3), "%)")) + ylab(paste0("PC2 (", signif(pve_wild$pve_wild[2], 3), "%)"))+ ggtitle("PC1 vs. PC2 Wild Populations")
plot(PCA_wild)
library(vcfR)
library(tidyverse)
library(reshape2)
library(dunn.test)
RISG <- read.vcfR("../Filtering/RISG.vcf")
Samples <- read.table("Samples.txt", header = TRUE) %>%
mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
het_results <- genetic_diff(RISG, pop=as.factor(poplist.names), method= 'nei')
View(Samples)
Samples <- read.table("Samples.txt", header = TRUE) %>%
mutate(Population = recode(Population, FI = 'CL1', NEH = 'CL2'))
poplist.names <- Samples$Population
het_results <- genetic_diff(RISG, pop=as.factor(poplist.names), method= 'nei')
round(colMeans(het_results[,c(3:8)], na.rm = TRUE), digits = 3)
#First we test for normality using a Kolmogorov-Smirnov Test
ks.test(het_df$Heterozygosity, "pnorm")
het_df <- melt(het_results[,c(3:8)], varnames=c('Index', 'Sample'), value.name = 'Heterozygosity', na.rm=TRUE) %>%
mutate(variable = recode(variable, Hs_CL1 = 'CL1', Hs_CL2 = 'CL2', Hs_MV = "MV", Hs_NR = "NR", Hs_GH = "GH", Hs_CT = "CT")) %>%
mutate(Type = ifelse(variable == "CL1" | variable == "CL2", "Commercial", "Wild"))
#First we test for normality using a Kolmogorov-Smirnov Test
ks.test(het_df$Heterozygosity, "pnorm")
#The data is not normally distributed, we should proceed with a Kruskall test
kruskal.test(het_df$Heterozygosity ~ het_df$variable)
#The populations are significantly different, we should use a Dunn-Test post-hoc
dunn.test(het_df$Heterozygosity, g = het_df$variable, method  = "bonferroni")
#Checking estimate of effect with Cohen's D
cohens_d(het_df, Heterozygosity ~ variable)
Het <- ggplot(het_df, aes(x=variable, y=Heterozygosity, fill = Type)) + geom_boxplot() +
xlab("Population")+
ylab("Observed Heterozygosity")+
ggtitle("Observed Heterozygosity") + ylim(0,1)
plot(Het)
Hetsum <- het_df %>%
group_by(variable) %>%
summarize(avg = mean(Heterozygosity), se = sd(Heterozygosity)/sqrt(length(Heterozygosity)))
HetMean <- ggplot(Hetsum, aes(x=variable, y = avg))+ geom_point()+
geom_errorbar(aes(ymin=avg-se, ymax=avg+se), width=.2,
position=position_dodge(0.05)) +
xlab("Population")+
ylab("Mean Heterozygosity")+
ggtitle("Mean and Standard Error")+
ylim(0,1)
plot(HetMean)
library(tidyverse)
CT_ppl <- read.table("PPL/CT.frq", header = TRUE) %>%
summarize(Population = "CT", Poly = sum(MAF != 0), Fixed = sum(MAF == 0), Po = sum(MAF != 0)/32353)%>%
mutate(Type="Wild")
NR_ppl <- read.table("PPL/NR.frq", header = TRUE) %>%
summarize(Population = "NR", Poly = sum(MAF != 0), Fixed = sum(MAF == 0), Po = sum(MAF != 0)/32353)%>%
mutate(Type="Wild")
CL2_ppl <- read.table("PPL/NEH.frq", header = TRUE) %>%
summarize(Population = "CL2", Poly = sum(MAF != 0), Fixed = sum(MAF == 0), Po = sum(MAF != 0)/32353)%>%
mutate(Type="Wild")
CL1_ppl <- read.table("PPL/FI.frq", header = TRUE) %>%
summarize(Population = "CL1", Poly = sum(MAF != 0), Fixed = sum(MAF == 0), Po = sum(MAF != 0)/32353)%>%
mutate(Type="Wild")
MV_ppl <- read.table("PPL/MV.frq", header = TRUE) %>%
summarize(Population = "MV", Poly = sum(MAF != 0), Fixed = sum(MAF == 0), Po = sum(MAF != 0)/32353)%>%
mutate(Type="Wild")
GH_ppl <- read.table("PPL/GH.frq", header = TRUE) %>%
summarize(Population = "GH", Poly = sum(MAF != 0), Fixed = sum(MAF == 0), Po = sum(MAF != 0)/32353)%>%
mutate(Type="Wild")
All_ppl <- rbind(GH_ppl, NR_ppl, CT_ppl, CL1_ppl, CL2_ppl, MV_ppl) %>% mutate(Exp = sum(Fixed)/6)
View(All_ppl)
library(tidyverse)
fis_df <- read_table("FIS/FIS.all") %>%
mutate(FID = recode(FID, FI = "CL1", NEH = "CL2")) %>%
mutate(Type = ifelse(FID == "CL1" | FID == "CL2", "Commercial", "Wild"))
ROH <- read.csv("C:/Users/angel/OneDrive/Documents/Masters Work/Lab Work/ALC_Masters_Thesis/Filtering/ROH/RISG.ROH.hom", row.names=1, sep="")
ROH <- read.csv("../RISG.ROH.hom", sep = "")
ROH <- read.csv("ROH/RISG.ROH.hom", sep = "")
View(ROH)
library(tidyverse)
